'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (actual, _, context) {
  return function (root, result) {
    var validOptions = _stylelint.utils.validateOptions(result, ruleName, { actual: actual });

    if (!validOptions || !actual) {
      return;
    }

    root.walkRules(function (rule) {
      var selector = null;

      if (!(0, _isStandardSyntaxRule2.default)(rule)) {
        return;
      }

      selector = rule.selector;

      if (!selector) {
        return;
      }

      if (selector.indexOf(':') === -1) {
        return;
      }

      if (selector.indexOf(':hover') === -1) {
        return;
      }

      if (selector.indexOf(':hover') >= 0 && selector.indexOf(':focus') >= 0) {
        return;
      }

      var isAccepted = hasAlready(rule.parent, selector.replace(/:hover/g, ':focus'), selector);

      if (context.fix && !isAccepted) {
        rule.parent.nodes.forEach(function (node) {
          if (node.type === 'rule' && node.selector === selector) {
            node.selector = node.selector + ', ' + node.selector.replace(/:hover/g, ':focus');
          }
        });
        return;
      }

      if (!isAccepted) {
        _stylelint.utils.report({
          index: rule.lastEach,
          message: messages.expected(selector),
          node: rule,
          ruleName: ruleName,
          result: result
        });
      }
    });
  };
};

var _stylelint = require('stylelint');

var _isStandardSyntaxRule = require('stylelint/lib/utils/isStandardSyntaxRule');

var _isStandardSyntaxRule2 = _interopRequireDefault(_isStandardSyntaxRule);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var deepFlatten = function deepFlatten(arr) {
  var _ref;

  return (_ref = []).concat.apply(_ref, _toConsumableArray(arr.map(function (v) {
    return Array.isArray(v) ? deepFlatten(v) : v;
  })));
};

var ruleName = exports.ruleName = 'a11y/selector-pseudo-class-focus';

var messages = exports.messages = _stylelint.utils.ruleMessages(ruleName, {
  expected: function expected(value) {
    return 'Expected that ' + value + ' is used together with :focus pseudo-class';
  }
});

function hasAlready(parent, repalcedSelector, selector) {
  var nodes = parent.nodes.map(function (i) {
    if (i.type === 'rule') return i.selectors;
  });
  var hoveredSelector = selector.split(',').filter(function (o) {
    return o.match(/:hover/gi);
  }).map(function (o) {
    return o.trim();
  });
  var returned = hoveredSelector.some(function (o) {
    return deepFlatten(nodes).indexOf(o.replace(/:hover/gi, ':focus')) >= 0;
  });
  if (returned) return true;

  return parent.nodes.some(function (i) {
    return i.type === 'rule' && i.selectors.indexOf(repalcedSelector) !== -1;
  });
}