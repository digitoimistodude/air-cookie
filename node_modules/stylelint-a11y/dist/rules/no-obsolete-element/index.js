'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (actual) {
  return function (root, result) {
    var validOptions = _stylelint.utils.validateOptions(result, ruleName, { actual: actual });

    if (!validOptions || !actual) {
      return;
    }

    root.walk(function (node) {
      var selector = null;

      if (node.type === 'rule') {
        if (!(0, _isStandardSyntaxRule2.default)(node)) {
          return;
        }
        selector = node.selector;
      } else if (node.type === 'atrule' && node.name.toLowerCase() === 'page' && node.params) {
        selector = node.params;
      }

      if (!selector) {
        return;
      }

      var isAccepted = check(selector, node);

      if (!isAccepted) {
        _stylelint.utils.report({
          index: node.lastEach,
          message: messages.expected(selector),
          node: node,
          ruleName: ruleName,
          result: result
        });
      }
    });
  };
};

var _stylelint = require('stylelint');

var _isStandardSyntaxRule = require('stylelint/lib/utils/isStandardSyntaxRule');

var _isStandardSyntaxRule2 = _interopRequireDefault(_isStandardSyntaxRule);

var _obsoleteElements = require('./obsoleteElements');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = 'a11y/no-obsolete-element';

var messages = exports.messages = _stylelint.utils.ruleMessages(ruleName, {
  expected: function expected(selector) {
    return 'Unexpected using obsolete selector "' + selector + '"';
  }
});

function check(selector, node) {
  if (node.type !== 'rule') {
    return true;
  }
  return !node.selectors.some(function (sel) {
    return _obsoleteElements.obsoleteElements.has(sel);
  });
}